{"version":3,"sources":["stores/todoSlice.js","stores/filterSlice.js","stores/useBoundStore.js","components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["createTodoSlice","set","todosArray","setTodosArray","addTodo","todo","state","concat","deleteTodo","filter","currTodo","toggleCompleteTodo","newTodos","slice","splice","indexOf","completed","createFilterSlice","filterStatus","setFilterStatus","useBoundStore","create","persist","name","getStorage","localStorage","partialize","Form","useState","inputText","setInputText","data-testid","value","onChange","e","target","type","className","onClick","preventDefault","newTodo","text","id","uuidv4","Todo","TodoList","filteredTodos","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ac695f2.chunk.js","sourcesContent":["export const createTodoSlice = (set) => ({\n  todosArray: [],\n  setTodosArray: (todosArray) => set(() => ({ todosArray: todosArray })),\n  addTodo: (todo) =>\n    set((state) => ({ todosArray: state.todosArray.concat(todo) })),\n  deleteTodo: (todo) =>\n    set((state) => ({\n      todosArray: state.todosArray.filter((currTodo) => currTodo !== todo),\n    })),\n  toggleCompleteTodo: (todo) =>\n    set((state) => {\n      let newTodos = state.todosArray.slice();\n      newTodos.splice(newTodos.indexOf(todo), 1, {\n        ...todo,\n        completed: !todo.completed,\n      });\n      return {\n        todosArray: newTodos,\n      };\n    })\n});\n","export const createFilterSlice = (set) => ({\n  filterStatus: \"all\",\n  setFilterStatus: (filterStatus) =>\n    set(() => ({ filterStatus: filterStatus }))\n});\n","import create from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { createTodoSlice } from \"./todoSlice\";\nimport { createFilterSlice } from \"./filterSlice\";\n\nexport const useBoundStore = create(\n  persist(\n    (...set) => ({\n      ...createTodoSlice(...set),\n      ...createFilterSlice(...set)\n    }),\n    {\n      name: \"todosStore\",\n      getStorage: () => localStorage,\n      partialize: (state) => ({ todosArray: state.todosArray })\n    }\n  )\n);\n","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\"; // for unique ID\r\nimport { useBoundStore } from \"../stores/useBoundStore\";\r\n\r\n/**\r\n * Form: Component returns JSX input field and filtering dropdown.\r\n * Also updates inputText and todo array states based on user input\r\n * return value: JSX elements for input field and filtering dropdown\r\n */\r\nconst Form = () => {\r\n  const [inputText, setInputText] = useState(\"\"); // state holds text inside input field\r\n  const addTodo = useBoundStore((state) => state.addTodo);\r\n  const setFilterStatus = useBoundStore((state) => state.setFilterStatus);\r\n  // const dispatch = useDispatch(); // to dispatch to the Redux store\r\n\r\n  /**\r\n   * inputTextHandler: Sets input text state to new value\r\n   * parameters: Input field event\r\n   */\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * submitTodoHandler: Event function adds submitted todo to\r\n   * todo array state, then clears the inputText state\r\n   * Should be called if todo submitted\r\n   * parameters: todo submission event\r\n   */\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault(); // Prevent event from doing its default behavior of refreshing\r\n\r\n    let newTodo = {\r\n      text: inputText,\r\n      completed: false,\r\n      id: uuidv4(),\r\n    };\r\n\r\n    // Add todo to todos array\r\n    addTodo(newTodo);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  /**\r\n   * statusHandler: Event function dispatches new filter status\r\n   * to filter status state. Should be called if filter state changed\r\n   * parameters: Filter status change event\r\n   */\r\n  const statusHandler = (e) => {\r\n    setFilterStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form data-testid=\"form\">\r\n      {/* sets the input value in the form while having an onChange to the input text handler */}\r\n      <input\r\n        value={inputText}\r\n        onChange={inputTextHandler}\r\n        type=\"text\"\r\n        className=\"todo-input\"\r\n      />\r\n\r\n      {/* onClick button is set to the submit handler */}\r\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        {/* Icon for font awesome image */}\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n\r\n      {/* div section for select which includes the values for... */}\r\n      {/* onChange(status handler), and filter options all, completed, and uncompleted */}\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { useBoundStore } from \"../stores/useBoundStore\";\r\n\r\n/**\r\n * Todo: Renders todo item's text, complete and trash buttons.\r\n * Handles deleting/completing items when respective buttons clicked\r\n * by dispatching to update state\r\n * parameters: todo to render, key of todo (to avoid unique keys error)\r\n * return value: JSX elements for todo item, complete button, and trash button\r\n */\r\nconst Todo = ({ todo, id }) => {\r\n  const toggleCompleteTodo = useBoundStore((state) => state.toggleCompleteTodo);\r\n  const deleteTodo = useBoundStore((state) => state.deleteTodo);\r\n\r\n  /**\r\n   * deleteHandler: Event function dispatches to todo array state\r\n   * to delete current todo from array.\r\n   * Should be called if delete button clicked.\r\n   */\r\n  const deleteHandler = () => {\r\n    deleteTodo(todo);\r\n  };\r\n\r\n  /**\r\n   * completeHandler: Event function dispatches to todo array state\r\n   * to toggle current todo's complete flag\r\n   * Should be called if complete button clicked.\r\n   */\r\n  const completeHandler = () => {\r\n    toggleCompleteTodo(todo);\r\n  };\r\n\r\n  //Render passed todo item with complete and delete buttons\r\n  return (\r\n    <div className=\"todo\">\r\n      {\" \"}\r\n      {/* $ means: If passed todo completed, \r\n            add the completed class (strikethrough). Else do nothing */}\r\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n        {todo.text}\r\n      </li>\r\n      {/* run completeHandler when complete button clicked */}\r\n      <button onClick={completeHandler} className=\"complete-btn\">\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button onClick={deleteHandler} className=\"trash-btn\">\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import Todo from \"./Todo\";\r\nimport { useBoundStore } from \"../stores/useBoundStore\";\r\n\r\n/**\r\n * TodoList: Returns a todo element for each todo in the\r\n * filtered todosArray state\r\n * return value: JSX elements for todo list and each todo\r\n */\r\nconst TodoList = () => {\r\n  const todosArray = useBoundStore((state) => state.todosArray);\r\n  const filterStatus = useBoundStore((state) => state.filterStatus);\r\n\r\n  // Set filteredTodos based on current filter status\r\n  const filteredTodos = todosArray.filter((todo) => {\r\n    return (\r\n      filterStatus === \"all\" ||\r\n      (filterStatus === \"completed\" && todo.completed) ||\r\n      (filterStatus === \"uncompleted\" && !todo.completed)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"todo-container\" data-testid=\"todolist\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map(\r\n          (\r\n            todo // Map: Cycles through each element of array (filteredTodos array)\r\n          ) => (\r\n            // Render a Todo component for each element of array\r\n            // key passed to avoid unique keys error\r\n            <Todo todo={todo} key={todo.id} />\r\n          )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\r\n\r\n// Components\r\nimport Form from \"./components/Form\"; // Input field + Filtering Dropdown\r\nimport TodoList from \"./components/TodoList\"; // Todo list with complete/delete buttons\r\n\r\n/**\r\n * App: Renders header, input form, todo list\r\n */\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Simon's Todo List!</h1>\r\n      </header>\r\n      <Form />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport React from \"react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}