{"version":3,"sources":["reducers/todoArray.js","reducers/filteredTodos.js","reducers/filterStatus.js","reducers/inputText.js","components/Form.js","components/Todo.js","components/TodoList.js","App.js","localStorage.js","reducers/rootReducer.js","reportWebVitals.js","index.js"],"names":["todoArray","state","action","type","todoItem","undefined","map","t","filter","id","text","completed","filteredTodos","currFilterStatus","currTodos","todo","filterStatus","inputText","Form","useSelector","store","dispatch","useDispatch","value","onChange","e","target","className","onClick","preventDefault","uuidv4","name","Todo","TodoList","persistedState","localStorage","getItem","JSON","parse","err","getLocalTodos","configureStore","reducer","todoArrayState","filterStatusState","preloadedState","devTools","subscribe","stringify","setItem","saveLocalTodos","getState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f705d49.chunk.js","sourcesContent":["/*\r\n * todoArray: Todo items array reducer,\r\n * calls todoItem reducer depending on action\r\n * parameters: Todo array state, action\r\n * return value: new todo array state based on \r\n * passed action's type \r\n */\r\nexport const todoArray = (state = [], action) => {\r\n\r\n    switch (action.type) {\r\n  \r\n      case 'ADD_TODO':\r\n  \r\n        return [\r\n          ...state,\r\n          todoItem(undefined, action)\r\n        ];\r\n  \r\n      case 'TOGGLE_COMPLETE_TODO':\r\n  \r\n        return state.map(t =>\r\n          todoItem(t, action)\r\n        );\r\n  \r\n      case 'DELETE_TODO':\r\n  \r\n        // Filter out the passed action.id, return filtered list\r\n        return state.filter((t) => t.id !== action.id);\r\n  \r\n      default:\r\n        return state;\r\n  \r\n    }\r\n    \r\n}\r\n\r\n/*\r\n * todoItem: Individual todo item reducer\r\n * parameters: individual todo item, action\r\n * return value: new individual todo item state based on \r\n * passed action's type and id/text\r\n */\r\nexport const todoItem = (state, action) => {\r\n  \r\n    switch (action.type) {\r\n  \r\n      case 'ADD_TODO':\r\n  \r\n        return {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n  \r\n      case 'TOGGLE_COMPLETE_TODO':\r\n  \r\n        if (state.id !== action.id) {\r\n          return state;\r\n        }\r\n  \r\n        return {\r\n          ...state,\r\n          completed: !state.completed\r\n        };\r\n  \r\n      default:\r\n        return state;\r\n  \r\n    }\r\n  \r\n}","/*\r\n * filteredTodos: Filtered todo items array reducer\r\n * parameters: Todo array state, action (with updated currTodos \r\n * and currFilterStatus passed within)\r\n * return value: new filtered todos array state based on \r\n * passed action's current filter status\r\n */\r\nexport const filteredTodos = (state = [], action) => {\r\n\r\n    switch(action.currFilterStatus) {\r\n  \r\n      case 'all':\r\n        return action.currTodos;\r\n  \r\n      case 'completed':\r\n        return action.currTodos.filter(todo => todo.completed === true)\r\n  \r\n      case 'uncompleted':\r\n        return action.currTodos.filter(todo => todo.completed === false)\r\n  \r\n      default:\r\n        return state;\r\n  \r\n    }\r\n  \r\n}","/*\r\n * filterStatus: Filter status reducer\r\n * parameters: filter status state, action\r\n * return value: new filter status state based on \r\n * passed action's type and filter status\r\n */\r\nexport const filterStatus = (state = 'all', action) => {\r\n\r\n    switch(action.type) {\r\n  \r\n      case 'SET_FILTER_STATUS':\r\n  \r\n        switch(action.filterStatus) {\r\n  \r\n          case 'all':\r\n          case 'completed':\r\n          case 'uncompleted':\r\n            return action.filterStatus;\r\n  \r\n          default:\r\n            return state;\r\n        }\r\n        \r\n      default:\r\n        return state;\r\n  \r\n    }\r\n  \r\n}","/*\r\n * inputText: Input text reducer\r\n * parameters: input text state, action\r\n * return value: new input text state based on \r\n * passed action's type and input text\r\n */\r\nexport const inputText = (state = \"\", action) => {\r\n\r\n    switch(action.type) {\r\n      \r\n      case 'SET_INPUT_TEXT':\r\n        return action.inputText;\r\n  \r\n      default:\r\n        return state; \r\n  \r\n    }\r\n\r\n} ","import { useSelector, useDispatch } from \"react-redux\" \r\nimport { v4 as uuidv4 } from 'uuid'; // for unique ID\r\n\r\n// useSelector: to get states from store, useDispatch: to get the ability to dispatch\r\n\r\n/*\r\n * Form: Component returns JSX input field and filtering dropdown.\r\n * Also updates inputText and todo array states based on user input\r\n * return value: JSX elements for input field and filtering dropdown\r\n */\r\nconst Form = () => {\r\n    \r\n    const inputText = useSelector(store => store.inputText); // state holds text inside input field\r\n    const dispatch = useDispatch(); // to dispatch to the Redux store\r\n\r\n    /* \r\n     * inputTextHandler: Event function dispatches the passed event's \r\n     * target's value (input field's text) to the input text state.\r\n     * Should be called if any changes to input field\r\n     * parameters: Input field event\r\n     */\r\n    const inputTextHandler = (e) => {    \r\n        \r\n        dispatch({\r\n            type: 'SET_INPUT_TEXT',\r\n            inputText: e.target.value,\r\n        });    \r\n    \r\n    };\r\n\r\n    /* \r\n     * submitTodoHandler: Event function adds submitted todo to\r\n     * todo array state, then clears the inputText state\r\n     * Should be called if todo submitted\r\n     * parameters: todo submission event\r\n     */\r\n    const submitTodoHandler = (e) => {\r\n\r\n        e.preventDefault(); // Prevent event from doing its default behavior of refreshing\r\n        \r\n        // Add todo to todos array\r\n        dispatch({\r\n            type: 'ADD_TODO',\r\n            text: inputText,\r\n            completed: false,\r\n            id: uuidv4(), // unique ID\r\n        });\r\n\r\n        // Reset input text to blank\r\n        dispatch({\r\n            type: 'SET_INPUT_TEXT',\r\n            inputText: '',\r\n        });  \r\n        \r\n    };\r\n\r\n    /* \r\n     * statusHandler: Event function dispatches new filter status \r\n     * to filter status state. Should be called if filter state changed\r\n     * parameters: Filter status change event\r\n     */\r\n    const statusHandler = (e) => {\r\n\r\n        dispatch({\r\n            type: 'SET_FILTER_STATUS',\r\n            filterStatus: e.target.value\r\n        });\r\n\r\n    };\r\n\r\n    return(\r\n              \r\n        <form>\r\n        {/* sets the input value in the form while having an onChange to the input text handler */}\r\n        <input value ={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n        \r\n         {/* onClick button is set to the submit handler */}        \r\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n            \r\n            {/* Icon for font awesome image */}            \r\n            <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        \r\n        {/* div section for select which includes the values for... */}                \r\n        {/* onChange(status handler), and filter options all, completed, and uncompleted */}      \r\n        <div className=\"select\">\r\n            <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n            </select>\r\n        </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport { useDispatch } from \"react-redux\"\r\n\r\n/*\r\n * Todo: Renders todo item's text, complete and trash buttons.\r\n * Handles deleting/completing items when respective buttons clicked\r\n * by dispatching to update state\r\n * parameters: todo to render, key of todo (to avoid unique keys error)\r\n * return value: JSX elements for todo item, complete button, and trash button\r\n */\r\nconst Todo = ( {todo, id} ) => {\r\n\r\n    const dispatch = useDispatch(); // used to dispatch to the Redux store\r\n\r\n    /* \r\n     * deleteHandler: Event function dispatches to todo array state\r\n     * to delete current todo from array.\r\n     * Should be called if delete button clicked.\r\n     */\r\n    const deleteHandler = () => {\r\n\r\n        dispatch({\r\n            type: 'DELETE_TODO',\r\n            id:   todo.id\r\n        });\r\n\r\n    };\r\n\r\n    /* \r\n     * deleteHandler: Event function dispatches to todo array state\r\n     * to toggle current todo's complete flag\r\n     * Should be called if complete button clicked.\r\n     */\r\n    const completeHandler = () => {\r\n        \r\n        dispatch({\r\n            type: 'TOGGLE_COMPLETE_TODO',\r\n            id:   todo.id\r\n        });\r\n\r\n    };\r\n    \r\n    //Render passed todo item with complete and delete buttons\r\n    return(\r\n\r\n        <div className=\"todo\"> {/* $ means: If passed todo completed, \r\n            add the completed class (strikethrough). Else do nothing */}\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{todo.text}</li>\r\n            \r\n            {/* run completeHandler when complete button clicked */}\r\n            <button onClick={completeHandler} className=\"complete-btn\">                \r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default Todo;","import Todo from './Todo';\r\nimport { useSelector } from \"react-redux\"\r\n\r\n/*\r\n * TodoList: Returns a todo element for each todo in the\r\n * passed filteredTodos array state\r\n * return value: JSX elements for todo list and each todo\r\n */\r\nconst TodoList = () => {\r\n\r\n// filtered todos array state\r\nconst filteredTodos = useSelector( store => store.filteredTodos );\r\n\r\nreturn(\r\n\r\n    <div className=\"todo-container\">\r\n        <ul className=\"todo-list\"> \r\n            {filteredTodos.map((todo) => ( // Map: Cycles through each element of array (filteredTodos array)\r\n                // Render a Todo component for each element of array\r\n                // key passed to avoid unique keys error\r\n                <Todo todo={todo} key={todo.id} />\r\n            ))}\r\n        </ul>\r\n    </div> \r\n    \r\n);\r\n\r\n};\r\n\r\nexport default (TodoList);\r\n\r\n","import \"./App.css\";\nimport { Provider } from 'react-redux'; // Provide components access to the store (for store to act like a state)\nimport { getLocalTodos, saveLocalTodos } from './localStorage.js'; // Local storage functions for getting/saving todos\nimport { configureStore } from '@reduxjs/toolkit'; // To create Redux store\nimport { rootReducer } from './reducers/rootReducer.js'; // Root reducer func for Redux store\n\n// Components\nimport Form from \"./components/Form\"; // Input field + Filtering Dropdown\nimport TodoList from \"./components/TodoList\"; // Todo list with complete/delete buttons\n\nconst persistedState = getLocalTodos(); // Get locally stored todos if any\n\n// Create store using root reducer + initial state\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: persistedState,\n  devTools: true, // devTools enabled for Redux Dev Tool extension usage\n});\n\n\n// When store changes, save todo arrays locally\nstore.subscribe(() => {\n  saveLocalTodos({\n    todoArray: store.getState().todoArray,\n    filteredTodos: store.getState().todoArray,\n  });\n});\n\n/*\n * App: Renders/initializes input form + todo list components\n * whilst wrapping them with Provider\n */\nfunction App() {\n  \n  return (\n\n\n    <div className=\"App\">\n      <header>\n        <h1>Simon's Todo List!</h1>\n      </header>\n\n      {/* Render input form followed by todo list */}\n      {/* Wrap components with Provider */}\n      <Provider store = {store}>\n        <Form />\n        <TodoList />\n      </Provider>\n\n    </div>\n\n  );\n\n}\n\nexport default App;\n","/*\r\n * getLocalTodos: Returns local todos from local storage if available\r\n */\r\nexport const getLocalTodos = () => {\r\n    try {\r\n      const todoArray = localStorage.getItem('state');\r\n      if (todoArray === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(todoArray);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  }; \r\n\r\n/*\r\n * saveLocalTodos: Saves local todos from passed state if valid\r\n */\r\nexport const saveLocalTodos = (state) => {\r\n  try {\r\n      const todoArray = JSON.stringify(state);\r\n      localStorage.setItem('state', todoArray);\r\n  } catch {\r\n  }\r\n};","import { todoArray } from './todoArray.js';\r\nimport { filteredTodos } from './filteredTodos.js';\r\nimport { filterStatus } from './filterStatus.js';\r\nimport { inputText } from './inputText.js';\r\n\r\n/*\r\n * rootReducer: Root reducer for todo list website\r\n * parameters: Redux store state, action\r\n * return value: new Redux store state based on passed action\r\n */\r\nexport const rootReducer = (state = {}, action) => {\r\n\r\n    // Get new state of todoArray and filterStatus first, to run\r\n    // filteredTodos reducer with updated values later\r\n    const todoArrayState = todoArray(state.todoArray, action);\r\n    const filterStatusState = filterStatus(state.filterStatus, action);\r\n  \r\n    return {\r\n      todoArray: todoArrayState,\r\n      filterStatus: filterStatusState,\r\n      inputText: inputText(\r\n        state.inputText,\r\n        action\r\n      ),\r\n      filteredTodos: filteredTodos(\r\n        state.filteredTodos,\r\n        {\r\n          ...action,\r\n          currTodos: todoArrayState,\r\n          currFilterStatus: filterStatusState\r\n        }\r\n      )\r\n    }\r\n  \r\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}